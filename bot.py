import asyncio
import logging
import os
import re
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from solana_analysis import analyze_wallet_from_file  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ CSV-—Ñ–∞–π–ª–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("TOKEN is not set in the .env file")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å MarkdownV2
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
UPLOAD_FOLDER = "D://solAnal"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 –¥–ª—è Telegram."""
    special_characters = r"_*[]()~`>#+-=|{}.!<>"
    return re.sub(f"([{re.escape(special_characters)}])", r"\\\1", text)

@dp.message(Command("start"))
async def start_command(message: Message):
    text = (
        "üëã Hello! I am a bot for analyzing Solana wallets.\n\n"
        "üîπ Send me a CSV file, and I will provide you with a PnL analysis for the last 1000 transactions."
    )
    await message.answer(escape_markdown(text))

@dp.message(lambda message: message.document)
async def handle_csv_file(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª"""
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv
    if not document.file_name.endswith(".csv"):
        await message.answer(escape_markdown("‚ùå Please send a CSV file"))
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = os.path.join(UPLOAD_FOLDER, document.file_name)
    file_info = await bot.get_file(document.file_id)
    await bot.download_file(file_info.file_path, file_path)

    await message.answer(escape_markdown(f"üîÑ Analyzing file `{document.file_name}`, please wait..."))

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CSV-—Ñ–∞–π–ª
    try:
        result = analyze_wallet_from_file(file_path)
        await message.answer(result)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as e:
        await message.answer(escape_markdown(f"‚ùå Error analyzing file: `{str(e)}`"))

async def main():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

