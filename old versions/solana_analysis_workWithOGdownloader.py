import pandas as pd  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ (DataFrame)
import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from solscan_downloader import download_solscan_csv
import re

def escape_markdown(text: str) -> str:
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    special_characters = r"[_*`\[\]()~>#+\-=|{}.!]"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
    escaped_text = re.sub(f'([{special_characters}])', r'\\\1', text)
    
    return escaped_text

def analyze_wallet(wallet: str) -> str:
    # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    save_path = f"D:\\solAnal\\trans_{wallet}.csv"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é solscan_downloader.py
    download_solscan_csv(wallet, save_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–∫–∞—á–∞–Ω
    if not os.path.exists(save_path):
        return f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ `{wallet}` –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV-—Ñ–∞–π–ª –≤ DataFrame
    df = pd.read_csv(save_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    required_columns = {"Time", "Flow", "Value", "TokenAddress"}
    if not required_columns.issubset(df.columns):
        return "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ CSV —Ñ–∞–π–ª–µ"

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    df["Time"] = pd.to_datetime(df["Time"], unit="s")
    df["Date"] = df["Time"].dt.date  # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–æ–π

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∫–∏ —Å SOL
    SOL_TOKEN_ADDRESS = "SOL"
    df_sol = df[df["TokenAddress"] == SOL_TOKEN_ADDRESS]

    # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    inflows = df_sol[df_sol["Flow"] == "in"]
    outflows = df_sol[df_sol["Flow"] == "out"]

    # –û–±—â–∏–π PnL
    total_in = inflows["Value"].sum()
    total_out = outflows["Value"].sum()
    total_pnl = total_in - total_out

    # PnL –ø–æ –¥–Ω—è–º
    daily_in = inflows.groupby("Date")["Value"].sum()
    daily_out = outflows.groupby("Date")["Value"].sum()
    daily_pnl = (daily_in - daily_out).fillna(0)

    # –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –∏ —É–±—ã—Ç–æ—á–Ω—ã–π –¥–Ω–∏
    best_day = daily_pnl.idxmax()
    best_pnl = daily_pnl.max()
    worst_day = daily_pnl.idxmin()
    worst_pnl = daily_pnl.min()

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
    fee_threshold = 1
    fees = df_sol[(df_sol["Flow"] == "out") & (df_sol["Value"] <= fee_threshold)]
    total_fees = fees["Value"].sum()
    daily_fees = fees.groupby("Date")["Value"].sum().fillna(0)

    # –ß–∏—Å—Ç—ã–π PnL –±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
    daily_pnl_no_fees = daily_pnl + daily_fees

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –¥–Ω—è–º
    daily_report = "\n".join([
        f"{date} {pnl:.6f} $ {pnl_no_fees:.6f} $ {fees:.6f} $"
        for date, pnl, pnl_no_fees, fees in zip(daily_pnl.index, daily_pnl, daily_pnl_no_fees, daily_fees)
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–∞ !
    result_text = (
        f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω*\n\n"
        f"üìä *–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ Solana –∫–æ—à–µ–ª—å–∫—É:*\n"
        f"üí∞ *–û–±—â–∏–π –¥–æ—Ö–æ–¥:* `{total_in:.6f} $`\n"
        f"üí∏ *–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:* `{total_out:.6f} $`\n"
        f"üìâ *–ß–∏—Å—Ç—ã–π PnL:* `{total_pnl:.6f} $`\n\n"
        f"üìÖ *PnL –ø–æ –¥–Ω—è–º:*\n```\nDate PnL –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π\n{daily_report}\n```\n\n"
        f"‚úÖ *–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –¥–µ–Ω—å:* `{best_day}` \\(\\+{best_pnl:.6f} $\\)\n"
        f"‚ùå *–°–∞–º—ã–π —É–±—ã—Ç–æ—á–Ω—ã–π –¥–µ–Ω—å:* `{worst_day}` \\({worst_pnl:.6f} $\\)\n\n"
        f"üè¶ *–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π:* `{total_fees:.6f} $`"
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    return escape_markdown(result_text)

