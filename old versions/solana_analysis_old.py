import pandas as pd  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ (DataFrame)
import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from solscan_downloader import download_solscan_csv

# –í–∞—à –∫–æ—à–µ–ª–µ–∫
wallet = "3mQKQtTvzqMSHk9BMewU98G1uNZqywkoCGimt2k7XdVW"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫

def analyze_wallet(wallet: str) -> str:
   
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é solscan_downloader.py
    download_solscan_csv(wallet)
    file_path=f"trans_{wallet}.csv"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–∫–∞—á–∞–Ω
    if file_path is None or not os.path.exists(file_path):
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet} –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit()

    # –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É—Ç–∏ file_path, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV-—Ñ–∞–π–ª –≤ DataFrame
    df = pd.read_csv(file_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    required_columns = {"Time", "Flow", "Value", "TokenAddress"}
    if not required_columns.issubset(df.columns):
        print("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ CSV-—Ñ–∞–π–ª–µ!")
        exit()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    df["Time"] = pd.to_datetime(df["Time"], unit="s")
    df["Date"] = df["Time"].dt.date  # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–æ–π


    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∫–∏ —Å SOL (SOL Token Address)
    wSOL_TOKEN_ADDRESS = "So11111111111111111111111111111111111111112"
    SOL_TOKEN_ADDRESS = "SOL"  # –ê–¥—Ä–µ—Å wSOL
    #df_sol = df[df["TokenAddress"].isin([SOL_TOKEN_ADDRESS, wSOL_TOKEN_ADDRESS])]
    df_sol = df[df["TokenAddress"].isin([SOL_TOKEN_ADDRESS])]


    # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    inflows = df_sol[df_sol["Flow"] == "in"]
    outflows = df_sol[df_sol["Flow"] == "out"]

    # ‚úÖ –û–±—â–∏–π PnL (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≤—Ö–æ–¥—è—â–∏–º–∏ –∏ –∏—Å—Ö–æ–¥—è—â–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏)
    total_in = inflows["Value"].sum()  # –í—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    total_out = outflows["Value"].sum()  # –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
    total_pnl = total_in - total_out  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫

    # ‚úÖ PnL –ø–æ –¥–Ω—è–º
    daily_in = inflows.groupby("Date")["Value"].sum()
    daily_out = outflows.groupby("Date")["Value"].sum()
    daily_pnl = (daily_in - daily_out).fillna(0)  # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –Ω—É–ª—è–º–∏

    # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –∏ —Å–∞–º—ã–π —É–±—ã—Ç–æ—á–Ω—ã–π –¥–Ω–∏
    best_day = daily_pnl.idxmax()
    best_pnl = daily_pnl.max()
    worst_day = daily_pnl.idxmin()
    worst_pnl = daily_pnl.min()

    # ‚úÖ –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π (–º–µ–ª–∫–∏–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å value < 1 –¥–æ–ª–ª–∞—Ä)
    fee_threshold = 1  # –ü–æ—Ä–æ–≥ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ–Ω—å—à–µ 1 –¥–æ–ª–ª–∞—Ä–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è–º–∏)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏ (value < 1 –¥–æ–ª–ª–∞—Ä)
    fees = df_sol[(df_sol["Flow"] == "out") & (df_sol["Value"] <= fee_threshold)]
    total_fees = fees["Value"].sum()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –¥–Ω—è–º
    daily_fees = fees.groupby("Date")["Value"].sum().fillna(0)

    # ‚úÖ –ß–∏—Å—Ç—ã–π PnL –±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
    daily_pnl_no_fees = daily_pnl + daily_fees

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –æ–¥–∏–Ω DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    daily_report = pd.DataFrame({
        "PnL": daily_pnl.map(lambda x: f"{x:.6f} $"),
        "PnL –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π": daily_pnl_no_fees.map(lambda x: f"{x:.6f} $"),
        "–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π": daily_fees.map(lambda x: f"-{abs(x):.6f} $"),
    }).fillna("0.000000 $")

    # ‚úÖ –ß–∏—Å—Ç—ã–π PnL –±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
    daily_pnl_no_fees = daily_pnl + daily_fees  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å PnL –±–µ–∑ —É—á–µ—Ç–∞ fee


    # üìä –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result_text = (
        f"üìä *–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ Solana-–∫–æ—à–µ–ª—å–∫—É:*\n"
        f"üí∞ *–û–±—â–∏–π –¥–æ—Ö–æ–¥:* {total_in:.6f} $\n"
        f"üí∏ *–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:* {total_out:.6f} $\n"
        f"üìâ *–ß–∏—Å—Ç—ã–π PnL:* {total_pnl:.6f} $\n\n"
        f"üìÖ *PnL –ø–æ –¥–Ω—è–º:*\n{daily_report}\n\n"
        f"‚úÖ *–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –¥–µ–Ω—å:* {best_day} (+{best_pnl:.6f} $)\n"
        f"‚ùå *–°–∞–º—ã–π —É–±—ã—Ç–æ—á–Ω—ã–π –¥–µ–Ω—å:* {worst_day} ({worst_pnl:.6f} $)\n\n"
        f"üè¶ *–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π:* {total_fees:.6f} $"
    )
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
    return result_text

