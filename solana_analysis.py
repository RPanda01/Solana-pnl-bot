import pandas as pd
import os
import re
import logging

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


def escape_markdown(text: str) -> str:
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    special_characters = r"[_*`\[\]()~>#+\-=|{}.!]"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
    escaped_text = re.sub(f'([{special_characters}])', r'\\\1', text)
    
    return escaped_text

def analyze_wallet_from_file(file_path: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–∫–∞—á–∞–Ω
        if not os.path.exists(file_path):
            return f"‚ùå Error: File for wallet `{wallet}` not found"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV-—Ñ–∞–π–ª –≤ DataFrame
        df = pd.read_csv(file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = {"Time", "Flow", "Value", "TokenAddress"}
        if not required_columns.issubset(df.columns):
            return escape_markdown("‚ùå Error: Required columns are missing in the CSV file")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        df["Time"] = pd.to_datetime(df["Time"], unit="s")
        df["Date"] = df["Time"].dt.date

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ SOL
        SOL_TOKEN_ADDRESS = "SOL"
        df_sol = df[df["TokenAddress"] == SOL_TOKEN_ADDRESS]

        # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        inflows = df_sol[df_sol["Flow"] == "in"]
        outflows = df_sol[df_sol["Flow"] == "out"]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
        total_in = inflows["Value"].sum()
        total_out = outflows["Value"].sum()
        total_pnl = total_in - total_out

        # PnL –ø–æ –¥–Ω—è–º
        daily_in = inflows.groupby("Date")["Value"].sum()
        daily_out = outflows.groupby("Date")["Value"].sum()
        daily_pnl = (daily_in - daily_out).fillna(0)

        # –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –∏ —É–±—ã—Ç–æ—á–Ω—ã–π –¥–Ω–∏
        best_day = daily_pnl.idxmax() if not daily_pnl.empty else "NA"
        best_pnl = daily_pnl.max() if not daily_pnl.empty else 0
        worst_day = daily_pnl.idxmin() if not daily_pnl.empty else "NA"
        worst_pnl = daily_pnl.min() if not daily_pnl.empty else 0

        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
        fee_threshold = 1
        fees = df_sol[(df_sol["Flow"] == "out") & (df_sol["Value"] <= fee_threshold)]
        total_fees = fees["Value"].sum()
        daily_fees = fees.groupby("Date")["Value"].sum().fillna(0)

        # –ß–∏—Å—Ç—ã–π PnL –±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
        daily_pnl_no_fees = daily_pnl + daily_fees

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –¥–Ω—è–º
        daily_report = "\n".join([
            f"{date} {pnl:.6f}$ {pnl_no_fees:.6f}$ {fees:.6f}$"
            for date, pnl, pnl_no_fees, fees in zip(daily_pnl.index, daily_pnl, daily_pnl_no_fees, daily_fees)
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        result_text = (
            f"‚úÖ *Analysis completed*\n\n"
            f"üìä *Solana wallet transaction analysis:*\n"
            f"üí∞ *Total inflow:* `{total_in:.6f}$`\n"
            f"üí∏ *Total outflow:* `{total_out:.6f}$`\n"
            f"üìâ *Net PnL:* `{total_pnl:.6f}$`\n\n"
            f"üìÖ *PnL by days:*\n```\nDate | PnL with fees | PnL without fees | Total fees\n{daily_report}\n```\n\n"
            f"‚úÖ *Best day:* `{best_day} ({best_pnl:.6f}$)`\n"
            f"‚ùå *Worst day:* `{worst_day} ({worst_pnl:.6f}$)`\n\n"
            f"üè¶ *Total fees:* `{total_fees:.6f}$`"
        )

        os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        
        return escape_markdown(result_text)

    except Exception as e:
         return escape_markdown(f"‚ùå Error analyzing file: `{str(e)}`")

